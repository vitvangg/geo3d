using System;
using System.Runtime.Serialization;
using UnityEngine;

namespace GD3D.Easing
{
    /// <summary>
    /// Uses ease data and modifies a value over a given amount of time.
    /// </summary>
    public class EaseObject
    {
        private readonly static ObjectIDGenerator s_idGenerator = new ObjectIDGenerator();

        private long? _id = null;
        /// <summary>
        /// The unique ID of this object which was generated by <see cref="ObjectIDGenerator"/>.
        /// </summary>
        public long ID => _id ?? throw new NullReferenceException($"{nameof(_id)} has not been generated yet. Please make sure that the id generator actually generates an ID for this ease object.");

        public bool Active = true;
        public bool Unscaled = false;
        public bool Reverse = false;
        public EaseCompleteMode CompleteMode;

        public EaseData EaseData = new EaseData();

        // Time
        private float _time = 0;
        public float Time
        {
            get => _time;
            set
            {
                // Clamp time between 0 and target time
                _time = Mathf.Clamp(value, 0, TargetTime);
            }
        }

        public float TargetTime = 1;

        // Value
        public float Value = 0;
        public float StartValue = 0;
        public float TargetValue = 1;

        // Actions
        public Action<EaseObject> OnUpdate;
        public Action<EaseObject> OnComplete;

        public EaseSettings EaseSettings => new EaseSettings(this);

        /// <summary>
        /// Updates this <see cref="EaseObject"/> meaning it's value is updated.
        /// </summary>
        public void Update()
        {
            // Get the value (time is divided by target time so we get the value between 0 and 1)
            float scaledTime = TargetTime <= 0 ? 1 : _time / TargetTime;

            float t = EaseData.Evaluate(scaledTime);

            // Set the value by mapping the value
            float mappedValue = (t * (TargetValue - StartValue)) + StartValue;

            Value = mappedValue;

            try
            {
                OnUpdate?.Invoke(this);
            }
            catch (Exception)
            {
#if UNITY_EDITOR
                Debug.LogError("An error happened whilst trying to execute update on a EaseObject. This probably happened because you left the scene whilst an object was still being eased.");
#endif
                Remove();
            }

            // Detect if time has reached the target time (or reached 0 if played in reverse)
            if ((Time >= TargetTime && !Reverse) || (Time <= 0 && Reverse))
            {
                OnComplete?.Invoke(this);

                // Do different stuff depending on the complete mode on this object
                switch (CompleteMode)
                {
                    case EaseCompleteMode.remove:
                        EasingManager.RemoveEaseObject(this);
                        break;

                    case EaseCompleteMode.stop:
                        Active = false;
                        break;

                    case EaseCompleteMode.loop:
                        Reset();
                        break;

                    case EaseCompleteMode.pingPong:
                        Reverse = !Reverse;
                        break;
                }
            }
        }

        /// <summary>
        /// Scales the value from the <paramref name="startValue"/> to the <paramref name="targetValue"/> relative to this <see cref="EaseObject"/>s start and target values.
        /// </summary>
        /// <returns>The scaled value</returns>
        public float GetValue(float startValue, float targetValue)
        {
            float oldRange = TargetValue - StartValue;
            float newRange = targetValue - startValue;
            float scaledValue = ((Value - StartValue) * newRange / oldRange) + startValue;

            return scaledValue;
        }

#region Ease States (Saving and loading)
        /// <summary>
        /// Saves the current state of this <see cref="EaseObject"/> and converts it into a <see cref="EaseState"/>.
        /// </summary>
        /// <returns>The saved state. Use this state to load this <see cref="EaseObject"/> later.</returns>
        public EaseState SaveToState()
        {
            return new EaseState(this);
        }

        /// <summary>
        /// Sets this <see cref="EaseObject"/> and all it's data to be same as the given <paramref name="state"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject LoadFromState(EaseState state)
        {
            Active = state.Active;
            Unscaled = state.Unscaled;
            Reverse = state.Reverse;

            // Set ease data
            SetSettings(state.EaseSettings);

            // Set time
            _time = state.Time;

            // Set value
            Value = state.Value;
            StartValue = state.StartValue;
            TargetValue = state.TargetValue;

            // Set actions
            OnUpdate = state.OnUpdate;
            OnComplete = state.OnComplete;

            return this;
        }
#endregion

#region Constructors
        /// <summary>
        /// Sets the id for this object and adds this <see cref="EaseObject"/> to the <see cref="EasingManager"/>.
        /// </summary>
        private void Initialize()
        {
            // Set ID if it's null
            if (_id == null)
            {
                _id = s_idGenerator.GetId(this, out bool _);
            }

            // Add to ease manager
            EasingManager.AddEaseObject(this);
        }

        /// <summary>
        /// Crates an empty ease object with the default settings.
        /// </summary>
        public EaseObject()
        {
            Initialize();
        }

        /// <summary>
        /// Creates an easing with a given <paramref name="time"/>, a start value of 0 and an end value of 1.
        /// </summary>
        public EaseObject(float time)
        {
            // Set target time
            TargetTime = time;
            
            Initialize();
        }

        /// <summary>
        /// Creates an easing with a given <paramref name="startValue"/> and <paramref name="targetValue"/>.
        /// </summary>
        public EaseObject(float startValue, float targetValue)
        {
            // Set value
            StartValue = startValue;
            TargetValue = targetValue;

            Initialize();
        }

        /// <summary>
        /// Creates an easing with a given <paramref name="startValue"/>, <paramref name="targetValue"/> and <paramref name="time"/>.
        /// </summary>
        public EaseObject(float startValue, float targetValue, float time)
        {
            // Set value
            StartValue = startValue;
            TargetValue = targetValue;

            // Set target time
            TargetTime = time;

            Initialize();
        }

        /// <summary>
        /// Creates an easing with a given <paramref name="startValue"/>, <paramref name="targetValue"/>, <paramref name="time"/> and <paramref name="easeData"/>.
        /// </summary>
        public EaseObject(float startValue, float targetValue, float time, EaseData easeData)
        {
            // Set value
            StartValue = startValue;
            TargetValue = targetValue;

            // Set target time
            TargetTime = time;

            // Set ease data
            EaseData = easeData;

            Initialize();
        }

        /// <summary>
        /// Crates a new <see cref="EaseObject"/> with the given <see cref="Easing.EaseSettings"/>. Every other value is just the default value.
        /// </summary>
        public EaseObject(EaseSettings easeSettings)
        {
            SetSettings(easeSettings);

            Initialize();
        }

        /// <summary>
        /// Crates a new <see cref="EaseObject"/> with the given <see cref="Easing.EaseData"/>. Every other value is just the default value.
        /// </summary>
        public EaseObject(EaseData easeSettings)
        {
            SetEaseData(easeSettings);

            Initialize();
        }

        /// <summary>
        /// Crates a new <see cref="EaseObject"/> that is loaded with the values of the given <see cref="EaseState"/>.
        /// </summary>
        public EaseObject(EaseState easeState)
        {
            LoadFromState(easeState);

            Initialize();
        }
#endregion

#region Methods
        /// <summary>
        /// Resets time and value back to their starting values. <para/>
        /// So this is essentially a replay.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject Reset()
        {
            _time = 0;

            Value = StartValue;

            return this;
        }

        /// <summary>
        /// Removes this <see cref="EaseObject"/> from the <see cref="EasingManager"/> list.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject Remove()
        {
            EasingManager.RemoveEaseObject(this);

            return this;
        }

#region Setting Methods
        /// <summary>
        /// Sets <see cref="Active"/> to <paramref name="active"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetActive(bool active)
        {
            Active = active;

            return this;
        }
        /// <summary>
        /// Sets <see cref="Unscaled"/> to <paramref name="unscaled"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetUnscaled(bool unscaled)
        {
            Unscaled = unscaled;

            return this;
        }

        /// <summary>
        /// Sets <see cref="Reverse"/> to <paramref name="reverse"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetReverse(bool reverse)
        {
            Reverse = reverse;

            return this;
        }

        /// <summary>
        /// Sets <see cref="CompleteMode"/> to <paramref name="newCompleteMode"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetCompleteMode(EaseCompleteMode newCompleteMode)
        {
            CompleteMode = newCompleteMode;

            return this;
        }

        /// <summary>
        /// Sets <see cref="TargetTime"/>, <see cref="EaseData"/> and <see cref="CompleteMode"/> to the set values in the <paramref name="newSettings"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetSettings(EaseSettings newSettings)
        {
            TargetTime = newSettings.Time;
            EaseData = newSettings.EaseData;
            CompleteMode = newSettings.CompleteMode;

            return this;
        }

#region Setting Ease Data
        /// <summary>
        /// Sets <see cref="EaseData"/> to <paramref name="easeData"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetEaseData(EaseData easeData)
        {
            EaseData = easeData;

            return this;
        }

        /// <summary>
        /// Sets <see cref="EaseObject"/>.<see cref="EaseData.Type"/> to <paramref name="easingType"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetEasingType(EasingType easingType)
        {
            EaseData.Type = easingType;

            return this;
        }

        /// <summary>
        /// Sets <see cref="EaseObject"/>.<see cref="EaseData.EaseRate"/> to <paramref name="easeRate"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetEaseRate(float easeRate)
        {
            EaseData.EaseRate = easeRate;

            return this;
        }
#endregion

#region Setting Time
        /// <summary>
        /// Sets <see cref="Time"/> to <paramref name="time"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetTime(float time)
        {
            Time = time;

            return this;
        }

        /// <summary>
        /// Sets <see cref="TargetTime"/> to <paramref name="targetTime"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetTargetTime(float targetTime)
        {
            TargetTime = targetTime;

            return this;
        }
#endregion

#region Setting Value
        /// <summary>
        /// Sets <see cref="Value"/> to <paramref name="value"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetValue(float value)
        {
            Value = value;

            return this;
        }

        /// <summary>
        /// Sets <see cref="StartValue"/> to <paramref name="startValue"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetStartValue(float startValue)
        {
            StartValue = startValue;

            return this;
        }

        /// <summary>
        /// Sets <see cref="TargetValue"/> to <paramref name="targetValue"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetTargetValue(float targetValue)
        {
            TargetValue = targetValue;

            return this;
        }

        /// <summary>
        /// Sets both <see cref="StartValue"/> and <see cref="TargetValue"/> to the given values.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetStartEndValue(float startValue, float targetValue)
        {
            StartValue = startValue;
            TargetValue = targetValue;

            return this;
        }
#endregion

#region Setting Actions
        /// <summary>
        /// Subscribes the given <paramref name="event"/> to <see cref="OnUpdate"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetOnUpdate(Action<EaseObject> @event)
        {
            // Only subscribe if the event is not null
            if (@event != null)
            {
                OnUpdate += @event;
            }

            return this;
        }

        /// <summary>
        /// Subscribes the given <paramref name="event"/> to <see cref="OnComplete"/>.
        /// </summary>
        /// <returns>This <see cref="EaseObject"/> so you can chain more stuff, like in LeanTween.</returns>
        public EaseObject SetOnComplete(Action<EaseObject> @event)
        {
            OnComplete += @event;

            return this;
        }
#endregion

#endregion

#endregion

        /// <summary>
        /// An enum that determines what an <see cref="EaseObject"/> will do when completed.
        /// </summary>
        [Serializable]
        public enum EaseCompleteMode
        {
            /// <summary>
            /// Will remove itself from the <see cref="EasingManager"/> list when completed.
            /// </summary>
            remove = 0,
            /// <summary>
            /// Will stop and do nothing when completed.
            /// </summary>
            stop = 1,
            /// <summary>
            /// Will start over back at time = 0 when completed and will play over and over again endlessly. (until stopped)
            /// </summary>
            loop = 2,
            /// <summary>
            /// Will play in reverse when completed, then will play regularly once the reverse playback is done, then back to reverse and so on endlessly. (until stopped)
            /// </summary>
            pingPong = 3,
        }
    }

    /// <summary>
    /// Represents a state of a <see cref="EaseObject"/> which saves both the settings and values. <para/>
    /// Use <see cref="EaseObject.SaveToState"/> or create a <see cref="EaseState">New </see><see cref="EaseState"/>() to save. <para/>
    /// Use <see cref="EaseObject.LoadFromState"/> to load from a state.
    /// </summary>
    [Serializable]
    public struct EaseState
    {
#region Default Value
        // I wish we could just set the defaut values of the individual properties and not get an error :(
        public static readonly EaseState defaultValue = new EaseState()
        {
            Active = true,
            Reverse = false,

            EaseSettings = EaseSettings.defaultValue,

            Time = 0,

            Value = 0,
            StartValue = 0,
            TargetValue = 1,
        };
#endregion

        [Header("Main Settings")]
        public bool Active;
        public bool Unscaled;
        public bool Reverse;

        [Space]

        // Ease data
        public EaseSettings EaseSettings;

        [Header("Values")]

        // Time
        public float Time;

        [Space]

        // Value
        public float Value;
        public float StartValue;
        public float TargetValue;

        // Actions
        public Action<EaseObject> OnUpdate;
        public Action<EaseObject> OnComplete;

        /// <summary>
        /// Crates a ease state from a ease object
        /// </summary>
        public EaseState(EaseObject obj)
        {
            Active = obj.Active;
            Unscaled = obj.Unscaled;
            Reverse = obj.Reverse;

            // Set ease data
            EaseSettings = obj.EaseSettings;

            // Set time
            Time = obj.Time;

            // Set value
            Value = obj.Value;
            StartValue = obj.StartValue;
            TargetValue = obj.TargetValue;

            // Set actions
            OnUpdate = obj.OnUpdate;
            OnComplete = obj.OnComplete;
        }
    }

    /// <summary>
    /// Contains data for settings of a <see cref="EaseObject"/>. <para/>
    /// Use this when creating a <see cref="EaseObject"/> with only one data type.
    /// </summary>
    [Serializable]
    public struct EaseSettings
    {
        public static readonly EaseSettings defaultValue = new EaseSettings(1, EaseData.defaultValue, EaseObject.EaseCompleteMode.remove);

        public float Time;

        public EaseData EaseData;

        public EaseObject.EaseCompleteMode CompleteMode;

        public EaseSettings(float time, EaseData easeData, EaseObject.EaseCompleteMode completeMode)
        {
            Time = time;
            EaseData = easeData;
            CompleteMode = completeMode;
        }

        /// <summary>
        /// Creates a new <see cref="EaseSettings"/> with the use of a <see cref="EaseObject"/>
        /// </summary>
        public EaseSettings(EaseObject obj)
        {
            Time = obj.TargetTime;
            EaseData = obj.EaseData;
            CompleteMode = obj.CompleteMode;
        }
    }
}
